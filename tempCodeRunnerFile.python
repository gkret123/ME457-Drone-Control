import numpy as np
from scipy.spatial.transform import Rotation as R

class Integrator:
    """Integrator for a system of first-order ordinary differential equations
    of the form \dot x = f(t, x, u).
    """
    def __init__(self, dt, f):
        self.dt = dt
        self.f = f

    def step(self, t, x, u):
        raise NotImplementedError

class Euler(Integrator): #RK1
    def step(self, t, x, u):
        return x + self.dt * self.f(t, x, u)

class Heun(Integrator): #RK2
    def step(self, t, x, u):
        intg = Euler(self.dt, self.f)
        xe = intg.step(t, x, u) # Euler predictor step
        return x + 0.5*self.dt * (self.f(t, x, u) + self.f(t+self.dt, xe, u))
    
class RK4(Integrator): # Runge-Kutta 4th order
    def step(self, t, x, u):
        k1 = self.f(t, x, u)
        k2 = self.f(t + 0.5*self.dt, x + 0.5*self.dt*k1, u)
        k3 = self.f(t + 0.5*self.dt, x + 0.5*self.dt*k2, u)
        k4 = self.f(t + self.dt, x + self.dt*k3, u)
        return x + self.dt/6 * (k1 + 2*k2 + 2*k3 + k4)

class P:
    mass = 11. #kg
    J_xx = 0.8244 #kg m^2
    J_yy = 1.135 #kg*m^2
    J_zz = 1.759 #kg*m^2
    J_xz = 0.1204 #kg*m^2

    # J_xx = 2 #kg m^2
    # J_yy = 1 #kg*m^2
    # J_zz = 1 #kg*m^2
    # J_xz = 0 #kg*m^2

    g = 9.81 #m/s^2
    S = 0.55 #m^2
    b = 2.8956 #m
    c = 0.18994 #m
    S_prop = 0.2027 #m^2
    rho = 1.2682 #kg/m^3
    k_motor = 80 #rad/s/volt
    k_T_p = 0.0
    k_Omega = 0.0
    e = 0.9





    ######################################################################################
                    #   Longitudinal Coefficients
    ######################################################################################
    C_L_0 = 0.23
    C_D_0 = 0.0424
    C_m_0 = 0.0135
    C_L_alpha = 5.61
    C_D_alpha = 0.132
    C_m_alpha = -2.74
    C_L_q = 7.95
    C_D_q = 0.0
    C_m_q = -38.21
    C_L_delta_e = 0.13
    C_D_delta_e = 0.0135
    C_m_delta_e = -0.99
    M = 50.0
    alpha0 = 0.47
    epsilon = 0.16
    C_D_p = 0.043


    ######################################################################################
                    #   Lateral Coefficients
    ######################################################################################
    C_Y_0 = 0.0
    C_ell_0 = 0.0
    C_n_0 = 0.0
    C_Y_beta = -0.98
    C_ell_beta = -0.13
    C_n_beta = 0.073
    C_Y_p = 0.0
    C_ell_p = -0.51
    C_n_p = 0.069
    C_Y_r = 0.0
    C_ell_r = 0.25
    C_n_r = -0.095
    C_Y_delta_a = 0.075
    C_ell_delta_a = 0.17
    C_n_delta_a = -0.011
    C_Y_delta_r = 0.19
    C_ell_delta_r = 0.0024
    C_n_delta_r = -0.069

    ######################################################################################
class RigidBody:
    def __init__(self, parameters):
        """Initialize the rigid body with parameters."""
        self.__dict__.update(parameters.__dict__)

    def euler_to_rotation(self, phi, theta, psi):
        """Returns the rotation matrix from body frame to inertial frame."""
        R_01 = np.array([[np.cos(psi), -np.sin(psi), 0],
                         [np.sin(psi), np.cos(psi), 0],
                         [0, 0, 1]])

        R_12 = np.array([[np.cos(theta), 0, np.sin(theta)],
                         [0, 1, 0],
                         [-np.sin(theta), 0, np.cos(theta)]])

        R_23 = np.array([[1, 0, 0],
                         [0, np.cos(phi), -np.sin(phi)],
                         [0, np.sin(phi), np.cos(phi)]])

        return R_01 @ R_12 @ R_23  # Combined transformation matrix

    def x_dot(self, t, x, U):
        f_x, f_y, f_z, l, m, n = U
        u, v, w = x[3:6]
        phi, theta, psi = x[6:9]
        p, q, r = x[9:12]

        # Compute translational kinematics
        position_dot = self.euler_to_rotation(phi, theta, psi) @ np.array([u, v, w])

        # Compute translational dynamics
        velocity_dot = np.array([
            r * v - q * w + f_x / self.mass,
            p * w - r * u + f_y / self.mass,
            q * u - p * v + f_z / self.mass
        ])

        # Compute rotational kinematics
        D = np.array([
            [1, np.sin(phi) * np.tan(theta), np.cos(phi) * np.tan(theta)],
            [0, np.cos(phi), -np.sin(phi)],
            [0, np.sin(phi) / np.cos(theta), np.cos(phi) / np.cos(theta)]
        ])
        angles_dot = D @ np.array([p, q, r])

        # Compute rotational dynamics
        T = self.J_xx * self.J_zz - self.J_xz**2
        T1 = self.J_xz * (self.J_xx - self.J_yy + self.J_zz) / T
        T2 = (self.J_zz * (self.J_zz - self.J_yy) + self.J_xz**2) / T
        T3, T4 = self.J_zz / T, self.J_xz / T
        T5, T6 = (self.J_zz - self.J_xx) / self.J_yy, self.J_xz / self.J_yy
        T7, T8 = ((self.J_xx - self.J_yy) * self.J_xx + self.J_xz**2) / T, self.J_xx / T

        angular_momentum = np.array([
            T1 * p * q - T2 * q * r + T3 * l + T4 * n,
            T5 * p * r - T6 * (p**2 - r**2) + m / self.J_yy,
            T7 * p * q - T1 * q * r + T4 * l + T8 * n
        ])

        return np.concatenate((position_dot, velocity_dot, angles_dot, angular_momentum))


    def simulate(self, x0, U, t_start, t_stop, dt=0.1):
        """
        Simulate the motion of the rigid body using RK4 integrator.
        """
        
        integrator = RK4(dt, self.x_dot)

        t_history, x_history = [t_start], [x0]
        t, x = t_start, x0

        while t < t_stop:
            U_current = U(t, x_history) if callable(U) else U
            x = integrator.step(t, x, U_current)
            t += dt
            t_history.append(t)
            x_history.append(x)

        return t_history, x_history


class Aircraft(RigidBody):
    def __init__(self, parameters, gravity=True):
        """Initialize Aircraft with aerodynamic parameters."""
        super().__init__(parameters)
        self.gravity_enabled = gravity

    def get_aero_forces(self, state, wind, deflections):
        delta_e, delta_a, delta_r = deflections
        u, v, w = state[3:6]
        p, q, r = state[9:12]
        u_wind, v_wind, w_wind = wind

        # Airspeed components
        V_a_body = np.array([u - u_wind, v - v_wind, w - w_wind])
        V_a_mag = max(np.linalg.norm(V_a_body), 1e-6)

        alpha = np.arctan2(V_a_body[2], V_a_body[0])
        beta = np.arctan2(V_a_body[1], np.sqrt(V_a_body[0]**2 + V_a_body[2]**2))

        rho, S, c, b = self.rho, self.S, self.c, self.b

        # Lift and Drag
        F_lift = 0.5 * rho * V_a_mag**2 * S * (
            self.C_L_0 + self.C_L_alpha * alpha + self.C_L_q * c * q / (2 * V_a_mag) + self.C_L_delta_e * delta_e
        )
        F_drag = 0.5 * rho * V_a_mag**2 * S * (
            self.C_D_0 + self.C_D_alpha * alpha + self.C_D_q * c * q / (2 * V_a_mag) + self.C_D_delta_e * delta_e
        )

        # Corrected Lift and Drag transformation
        f_x, f_z = np.array([
            [np.cos(alpha), -np.sin(alpha)],
            [np.sin(alpha), np.cos(alpha)]
        ]) @ np.array([-F_drag, -F_lift])

        # Lateral Forces
        f_y = 0.5 * rho * V_a_mag**2 * S * (
            self.C_Y_0 + self.C_Y_beta * beta + self.C_Y_p * b * p / (2 * V_a_mag) +
            self.C_Y_r * b * r / (2 * V_a_mag) + self.C_Y_delta_a * delta_a + self.C_Y_delta_r * delta_r
        )

        # Aerodynamic Moments
        l = 0.5 * rho * V_a_mag**2 * S * b * (
            self.C_ell_0 + self.C_ell_beta * beta + self.C_ell_p * b * p / (2 * V_a_mag) +
            self.C_ell_r * b * r / (2 * V_a_mag) + self.C_ell_delta_a * delta_a + self.C_ell_delta_r * delta_r
        )

        m = 0.5 * rho * V_a_mag**2 * S * c * (
            self.C_m_0 + self.C_m_alpha * alpha + self.C_m_q * c * q / (2 * V_a_mag) + self.C_m_delta_e * delta_e
        )

        n = 0.5 * rho * V_a_mag**2 * S * b * (
            self.C_n_0 + self.C_n_beta * beta + self.C_n_p * b * p / (2 * V_a_mag) +
            self.C_n_r * b * r / (2 * V_a_mag) + self.C_n_delta_a * delta_a + self.C_n_delta_r * delta_r
        )

        return np.array([f_x, f_y, f_z, l, m, n])


    def get_gravity(self, state):
        phi, theta, psi = state[6:9]
        R_0b = self.euler_to_rotation(phi, theta, psi)
        g_inertial = np.array([0, 0, self.g])  # gravity pointing down in NED
        g_body = R_0b.T @ g_inertial

        return np.array([
            self.mass * g_body[0],
            self.mass * g_body[1],
            self.mass * g_body[2],
            0, 0, 0
        ])


    def get_thrust(self, T_p, Q_p):
        return np.array([T_p, 0, 0, 0, 0, -Q_p])

    def get_forces(self, t, x_history):
        """
        Computes total forces acting on the aircraft.
        """
        wind = np.array([0, 0, 0])
        deflections = np.array([0, 0, 0])

        # Compute forces
        U = self.get_aero_forces(x_history[-1], wind, deflections)
        if self.gravity_enabled:
            U += self.get_gravity(x_history[-1])
        U += self.get_thrust(37.7794805541605, 1.8098467397878482)  # Hardcoded values from test case

        return U
    


# Initialize the aircraft object
mav = Aircraft(P)

# Control surface deflections
delta_elevator = -0.15705144
delta_aileron = 0.01788999
delta_rudder = 0.01084654

# Given quaternion [x, y, z, w]
quaternion = [2.47421558e-01, 6.56821468e-02, 2.30936730e-01, 9.38688796e-01]

# Convert quaternion to Euler angles
rotation = R.from_quat(quaternion)
euler_angles = rotation.as_euler('ZYX', degrees=False)

# Initial state vector [north, east, down, u, v, w, phi, theta, psi, p, q, r]
state = np.array([
    61.9506532, 22.2940203, -110.837551,  # Position
    27.3465947, 0.619628233, 1.42257772,  # Velocity
    euler_angles[2], euler_angles[1], euler_angles[0],  # Orientation
    0.00498772167, 0.168736005, 0.171797313  # Angular velocity
])

# Compute forces and moments
forces_and_moments = mav.get_aero_forces(state, [0, 0, 0], [delta_elevator, delta_aileron, delta_rudder])
forces_and_moments += mav.get_gravity(state)
forces_and_moments += mav.get_thrust(37.7794805541605, 1.8098467397878482)

# Print the forces and moments
print("Forces and Moments : Case 2\n")
print("fx: ", forces_and_moments[0])
print("fy: ", forces_and_moments[1])
print("fz: ", forces_and_moments[2])
print("Mx: ", forces_and_moments[3])
print("My: ", forces_and_moments[4])
print("Mz: ", forces_and_moments[5], "\n")

# Compute state derivatives
x_dot = mav.x_dot(0, state, forces_and_moments)

# Print the state derivatives
print("State Derivatives : Case 2\n")
print("north_dot: ", x_dot[0])
print("east_dot: ", x_dot[1])
print("down_dot: ", x_dot[2])
print("   u_dot: ", x_dot[3])
print("   v_dot: ", x_dot[4])
print("   w_dot: ", x_dot[5])
print("  phi_dot: ", x_dot[6])
print("  theta_dot: ", x_dot[7])
print("  psi_dot: ", x_dot[8])
print("   p_dot: ", x_dot[9])
print("   q_dot: ", x_dot[10])
print("    r_dot: ", x_dot[11], "\n")